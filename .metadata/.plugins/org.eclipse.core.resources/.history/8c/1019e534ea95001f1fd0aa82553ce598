package p2206breakwall;

import java.io.*;
import java.util.*;

public class Main {
	private static int N, M, answer;
	private static char[][] map;
	private static boolean[][] visited;
	private static boolean flag;
	private static int[] dR = {-1, 1, 0, 0}, dC = {0, 0, -1, 1};
	
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("src/p2206breakwall/input.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer tokenizer = new StringTokenizer(br.readLine());
		N = Integer.parseInt(tokenizer.nextToken());
		M = Integer.parseInt(tokenizer.nextToken());
		answer = N * M + 1;
		
		map = new char[N][];
		visited = new boolean[N][M];
		
		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
		}
		
		dfs(1, 0, 0, false);
		
		bw.write(String.valueOf(flag ? answer : -1));
		bw.flush();
		bw.close();
		br.close();
	}
	
	private static void dfs(int depth, int row, int column, boolean wall) {
		visited[row][column] = true;
		
		if (row == N - 1 && column == M - 1) {
			flag = true;
			answer = Math.min(answer, depth);
			visited[row][column] = false;
			return;
		}
		
		for (int i = 0; i < 4; i++) {
			int nextRow = row + dR[i];
			int nextColumn = column + dC[i];
			
			if (0 <= nextRow && nextRow <= N - 1
					&& 0 <= nextColumn && nextColumn <= M - 1
					&& !visited[nextRow][nextColumn]) {
				if (map[nextRow][nextColumn] == '1' && !wall) {
					dfs(depth + 1, nextRow, nextColumn, true);
				} else if (map[nextRow][nextColumn] == '0') {
					dfs(depth + 1, nextRow, nextColumn, wall);
				}
			}
		}
		
		visited[row][column] = false;
	}
}
