package p1916mincost;

import java.io.*;
import java.util.*;

public class Main {
	private static final long INF = 100_000L * 100_000L + 1L;
	private static int N, M, start, destination;
	private static List<List<int[]>> adList = new ArrayList<>();
	private static PriorityQueue<long[]> queue = new PriorityQueue<>((o1, o2) -> o1[1] == o2[1] ? 0 : o1[1] > o2[1] ? 1 : -1);
	private static long[] distance;
	private static boolean[] visited;
	
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("src/p1916mincost/input.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < N + 1; i++) {
			adList.add(new ArrayList<>());
		}
		
		for (int i = 0; i < M; i++) {
			int[] edge = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
			adList.get(edge[0]).add(new int[] { edge[1], edge[2] });
		}
		
		StringTokenizer tokenizer = new StringTokenizer(br.readLine());
		start = Integer.parseInt(tokenizer.nextToken());
		destination = Integer.parseInt(tokenizer.nextToken());
		
		distance = new long[N + 1];
		Arrays.fill(distance, INF);
		distance[start] = 0L;
		visited = new boolean[N + 1];
		
		queue.add(new long[] {(long) start, 0L});
		
		dijkstra();
		
		bw.write(String.valueOf(distance[destination]));
		bw.flush();
		bw.close();
		br.close();
	}
	
	private static void dijkstra() {
		while (!queue.isEmpty()) {
			long[] nowNode = queue.poll();
			
			if (visited[(int) nowNode[0]]) {
				continue;
			}
			
			visited[(int) nowNode[0]] = true;
			
			for (int[] nextNode : adList.get((int) nowNode[0])) {
				
			}
		}
	}
}
