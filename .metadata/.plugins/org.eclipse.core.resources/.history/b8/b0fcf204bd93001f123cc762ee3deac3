package p2606virus;

import java.io.*;
import java.util.*;

public class Main {
	private static int[] parents;
	
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("src/p2606virus/input.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int N = Integer.parseInt(br.readLine());
		int M = Integer.parseInt(br.readLine());
		
		parents = new int[N + 1];
		for (int i = 1; i < N + 1; i++) {
			parents[i] = i;
		}
		
		for (int i = 0; i < M; i++) {
			StringTokenizer tokenizer = new StringTokenizer(br.readLine());
			int nodeA = Integer.parseInt(tokenizer.nextToken());
			int nodeB = Integer.parseInt(tokenizer.nextToken());
			union(nodeA, nodeB);
		}
		
		int count = 0;
		
		for (int i = 2; i < N + 1; i++) {
			count += find(1) == find(i) ? 1 : 0;
		}
		
		bw.write(String.valueOf(count));
		bw.flush();
		bw.close();
		br.close();
	}
	
	private static void union(int nodeA, int nodeB) {
		nodeA = find(nodeA);
		nodeB = find(nodeB);
		
		if (nodeA != nodeB) {
			parents[nodeB] = nodeA;
		}
	}
	
	private static int find(int node) {
		if (parents[node] == node) {
			return parents[node];
		}
		
		return parents[node] = find(parents[node]);
	}
}
